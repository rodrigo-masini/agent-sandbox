version: '3.9'

services:
  redis:
    image: redis:7-alpine
    container_name: agtsdbx-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agtsdbx_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:15
    container_name: agtsdbx-db-dev
    environment:
      - POSTGRES_DB=agtsdbx
      - POSTGRES_USER=agtsdbx
      - POSTGRES_PASSWORD=agtsdbx_dev_password
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agtsdbx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agtsdbx -d agtsdbx"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  agtsdbx:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: agtsdbx-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/public:/app/public:ro
      - ./backend/config:/app/config:ro
      - ./backend/tests:/app/tests:ro
      - ./backend/composer.json:/app/composer.json:ro
      - ./backend/composer.lock:/app/composer.lock:rw
      - agtsdbx_vendor:/app/vendor
      - agtsdbx_workdir:/app/WORKDIR
      - agtsdbx_storage:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - APP_ENV=${APP_ENV:-development}
      - APP_DEBUG=${APP_DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - WORKDIR=/app/WORKDIR
      - DATABASE_URL=postgresql://agtsdbx:agtsdbx_dev_password@postgres:5432/agtsdbx
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PHP_DISPLAY_ERRORS=1
      - PHP_ERROR_REPORTING=E_ALL
      - COMPOSER_ALLOW_SUPERUSER=1
      - COMPOSER_NO_INTERACTION=1
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - agtsdbx_network
    # Simplified health check that's more reliable
    healthcheck:
      test: ["CMD-SHELL", "php -r \"echo 'OK';\" || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # Add restart policy for development
    restart: unless-stopped
    # Resource limits to prevent memory issues
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: agtsdbx-frontend-dev
    ports:
      - "8080:8080"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/static:/app/static:ro
      - ./frontend/templates:/app/templates:ro
      - ./frontend/tests:/app/tests:ro
      - ./frontend/requirements:/app/requirements:ro
    environment:
      - DEBUG=${DEBUG:-true}
      - AGTSDBX_BASE_URL=http://agtsdbx:8000
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      agtsdbx:
        condition: service_started  # Don't wait for health, just started
    networks:
      - agtsdbx_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || python3 -c 'import sys; sys.exit(0)'"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 45s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

volumes:
  agtsdbx_workdir:
    driver: local
  agtsdbx_storage:
    driver: local
  agtsdbx_vendor:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  agtsdbx_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16