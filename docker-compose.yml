x-common-variables: &common-variables
  APP_ENV: ${APP_ENV:-development}
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  WORKDIR: /app/WORKDIR

x-healthcheck-defaults: &healthcheck-defaults
  interval: 10s
  timeout: 5s
  retries: 10
  start_period: 30s

services:
  # ============================================
  # REDIS
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-agtsdbx}-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-16379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - agtsdbx_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "ping"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # POSTGRESQL
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-agtsdbx}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agtsdbx}
      POSTGRES_USER: ${POSTGRES_USER:-agtsdbx}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agtsdbx_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_AUTH:-trust}
    ports:
      - "${POSTGRES_PORT:-15432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d:ro
    networks:
      - agtsdbx_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]

  # ============================================
  # BACKEND (PHP)
  # ============================================
  agtsdbx:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: ${PROJECT_NAME:-agtsdbx}-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/src:/app/src:${MOUNT_MODE:-rw}
      - ./backend/public:/app/public:${MOUNT_MODE:-rw}
      - ./backend/config:/app/config:${MOUNT_MODE:-rw}
      - ./backend/tests:/app/tests:${MOUNT_MODE:-rw}
      - ./backend/composer.json:/app/composer.json:ro
      - ./backend/composer.lock:/app/composer.lock:rw
      - backend_vendor:/app/vendor
      - backend_workdir:/app/WORKDIR
      - backend_storage:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock:${DOCKER_SOCK_MODE:-rw}
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://${POSTGRES_USER:-agtsdbx}:${POSTGRES_PASSWORD:-agtsdbx_password}@postgres:5432/${POSTGRES_DB:-agtsdbx}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT:-512M}
      PHP_MAX_EXECUTION_TIME: ${PHP_MAX_EXECUTION_TIME:-300}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - agtsdbx_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || php -r 'exit(1);'"]
    deploy:
      resources:
        limits:
          cpus: '${BACKEND_CPU_LIMIT:-2}'
          memory: ${BACKEND_MEM_LIMIT:-1G}
        reservations:
          cpus: '${BACKEND_CPU_RESERVE:-0.5}'
          memory: ${BACKEND_MEM_RESERVE:-256M}

  # ============================================
  # FRONTEND (Python/NiceGUI)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: ${PROJECT_NAME:-agtsdbx}-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    volumes:
      - ./frontend/src:/app/src:${MOUNT_MODE:-rw}
      - ./frontend/static:/app/static:${MOUNT_MODE:-rw}
      - ./frontend/templates:/app/templates:${MOUNT_MODE:-rw}
      - ./frontend/tests:/app/tests:${MOUNT_MODE:-rw}
      - ./frontend/requirements:/app/requirements:ro
    environment:
      <<: *common-variables
      DEBUG: ${DEBUG:-true}
      AGTSDBX_BASE_URL: http://agtsdbx:8000
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    env_file:
      - .env
    depends_on:
      agtsdbx:
        condition: service_healthy
    networks:
      - agtsdbx_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || python3 -c 'exit(1)'"]
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-1}'
          memory: ${FRONTEND_MEM_LIMIT:-512M}

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  backend_vendor:
    driver: local
  backend_workdir:
    driver: local
  backend_storage:
    driver: local

networks:
  agtsdbx_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16