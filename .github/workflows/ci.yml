name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Grant necessary permissions for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_mysql, pdo_pgsql, redis, curl, json, opcache, mbstring, xml, zip
          coverage: xdebug
          tools: composer:v2, phpstan, phpcs
          
      - name: Validate composer.json
        run: |
          cd backend
          composer validate --strict
          
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
          
      - name: Install dependencies
        run: |
          cd backend
          composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
          
      - name: Run PHP linting
        run: |
          cd backend
          find src -name "*.php" -exec php -l {} \;
          
      - name: Run PHPStan
        run: |
          cd backend
          if [ -f phpstan.neon ]; then
            vendor/bin/phpstan analyse --no-progress || true
          fi
          
      - name: Run tests
        run: |
          cd backend
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit --coverage-text || true
          else
            echo "PHPUnit not installed, skipping tests"
          fi
          
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          cd frontend
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/dev.txt
          
      - name: Run linting
        run: |
          cd frontend
          flake8 src --max-line-length=120 --extend-ignore=E203,W503 || true
          
      - name: Run type checking
        run: |
          cd frontend
          mypy src --ignore-missing-imports || true
          
      - name: Run tests with coverage
        run: |
          cd frontend
          python -m pytest tests/ --cov=src --cov-report=term-missing -v || true
          
  docker-build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: agtsdbx
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: agtsdbx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          # Set test values
          sed -i 's/your_actual_api_key_here/test_api_key/g' .env
          sed -i 's/your_actual_org_id_here/test_org_id/g' .env
          sed -i 's/your_actual_project_id_here/test_project_id/g' .env
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/Dockerfile
          target: development
          tags: agtsdbx-backend:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: development
          tags: agtsdbx-frontend:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 20
          
      - name: Check container status
        run: |
          docker ps -a
          docker compose logs --tail=50
          
      - name: Test backend health endpoint
        run: |
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8000/health; then
              echo "Backend is healthy"
              break
            fi
            echo "Attempt $((attempt + 1)) failed, retrying..."
            sleep 3
            attempt=$((attempt + 1))
          done
          
      - name: Test frontend health endpoint
        run: |
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/api/health; then
              echo "Frontend is healthy"
              break
            fi
            echo "Attempt $((attempt + 1)) failed, retrying..."
            sleep 3
            attempt=$((attempt + 1))
          done
          
      - name: Run integration tests
        run: |
          # Test basic API endpoints
          curl -X POST http://localhost:8000/api/v1/system/info || true
          
      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > docker-compose.log
          echo "=== Docker Compose Logs ===" && cat docker-compose.log
          
      - name: Clean up
        if: always()
        run: |
          docker compose down -v
          
  security-scan:
    runs-on: ubuntu-latest
    # Only run on main branch or if PR is labeled with 'security-scan'
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'security-scan')
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner - Filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build
          
      - name: Upload Trivy FS results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail if upload fails
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'
          
      - name: Build Docker image for scanning
        run: |
          docker build -t agtsdbx-scan:latest ./backend/docker/
        continue-on-error: true
          
      - name: Run Trivy on Docker image
        if: success()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'agtsdbx-scan:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          
      - name: Upload Docker scan results
        if: success()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-docker'
          
      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'agent-sandbox'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true
          
      - name: Upload Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/
          
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
          
      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=agent-sandbox
            -Dsonar.organization=${{ github.repository_owner }}
            
      - name: Check code with CodeQL
        if: github.event_name == 'pull_request'
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
          
  notify-status:
    needs: [test-backend, test-frontend, docker-build-and-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.test-backend.result }}" == "failure" ] || \
             [ "${{ needs.test-frontend.result }}" == "failure" ] || \
             [ "${{ needs.docker-build-and-test.result }}" == "failure" ]; then
            echo "Build failed!"
            exit 1
          else
            echo "Build succeeded!"
          fi
