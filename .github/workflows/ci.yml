name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  # PHP Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo, pdo_mysql, pdo_pgsql, redis, curl, json, opcache, mbstring, xml, zip, pcntl, posix
          coverage: xdebug
          tools: composer:v2, phpstan, phpcs, phpunit
          
      - name: Validate composer.json
        run: |
          cd backend
          composer validate --strict
          
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-
          
      - name: Install dependencies
        run: |
          cd backend
          composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
          
      - name: Run PHP linting
        run: |
          cd backend
          find src -name "*.php" -exec php -l {} \;
          
      - name: Run PHP CodeSniffer
        run: |
          cd backend
          if [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=PSR12 src/ || true
          else
            echo "PHP CodeSniffer not installed, skipping"
          fi
          
      - name: Run PHPStan
        run: |
          cd backend
          if [ -f phpstan.neon ]; then
            vendor/bin/phpstan analyse --no-progress || true
          else
            echo "PHPStan configuration not found, skipping"
          fi
          
      - name: Run Unit Tests with Coverage
        run: |
          cd backend
          if [ -d tests ]; then
            vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text || true
          else
            echo "No tests directory found, skipping tests"
          fi
          
      - name: Upload PHP Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend-php-${{ matrix.php-version }}
          fail_ci_if_error: false
          
  # Python Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
      - name: Install dependencies
        run: |
          cd frontend
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/dev.txt
          
      - name: Run linting
        run: |
          cd frontend
          flake8 src --max-line-length=120 --extend-ignore=E203,W503 || true
          
      - name: Run type checking
        run: |
          cd frontend
          mypy src --ignore-missing-imports || true
          
      - name: Run Security Check with Bandit
        run: |
          cd frontend
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Run Unit Tests with Coverage
        run: |
          cd frontend
          if [ -d tests ]; then
            python -m pytest tests/ --cov=src --cov-report=term-missing --cov-report=xml -v || true
          else
            echo "No tests directory found, skipping tests"
          fi
          
      - name: Upload Python Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage.xml
          flags: frontend-python-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/your_actual_api_key_here/test_api_key/g' .env
          sed -i 's/your_actual_org_id_here/test_org_id/g' .env
          sed -i 's/your_actual_project_id_here/test_project_id/g' .env
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build images
        run: |
          docker compose build --parallel
          
      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 30
          
      - name: Check service health
        run: |
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8000/health && curl -f http://localhost:8080/api/health; then
              echo "Services are healthy"
              break
            fi
            echo "Attempt $((attempt + 1)) failed, retrying..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
      - name: Run Backend Integration Tests
        run: |
          if docker exec agtsdbx-backend-dev test -d tests/Integration; then
            docker exec agtsdbx-backend-dev php vendor/bin/phpunit tests/Integration/ || true
          else
            echo "No integration tests found for backend"
          fi
          
      - name: Run Frontend E2E Tests
        run: |
          if docker exec agtsdbx-frontend-dev test -f tests/test_e2e.py; then
            docker exec agtsdbx-frontend-dev python -m pytest tests/test_e2e.py -v || true
          else
            echo "No E2E tests found for frontend"
          fi
          
      - name: Run Security Tests
        run: |
          if docker exec agtsdbx-frontend-dev test -d tests/security; then
            docker exec agtsdbx-frontend-dev python -m pytest tests/security/ -v || true
          else
            echo "No security tests found"
          fi
          
      - name: Run Performance Tests
        run: |
          if docker exec agtsdbx-frontend-dev test -d tests/performance; then
            docker exec agtsdbx-frontend-dev python -m pytest tests/performance/ -v -m "not slow" || true
          else
            echo "No performance tests found"
          fi
          
      - name: Test API Contract
        run: |
          # Create a Python script file to test API contract
          cat > test_api_contract.py << 'SCRIPT_END'
          import asyncio
          import sys
          import os
          sys.path.insert(0, '/app')
          
          async def test():
              try:
                  from src.clients.agtsdbx_client import AgtsdbxClient
                  client = AgtsdbxClient('http://agtsdbx:8000')
                  async with client:
                      result = await client.health_check()
                      assert result['status'] == 'healthy', f"Health check failed: {result}"
                      print('✅ API contract test passed')
                      return 0
              except Exception as e:
                  print(f'❌ API contract test failed: {e}')
                  return 1
          
          exit_code = asyncio.run(test())
          sys.exit(exit_code)
          SCRIPT_END
          
          # Copy script to container and execute
          docker cp test_api_contract.py agtsdbx-frontend-dev:/tmp/test_api_contract.py
          docker exec agtsdbx-frontend-dev python /tmp/test_api_contract.py || true
          
      - name: Test Basic API Endpoints
        run: |
          # Test backend health endpoint
          curl -f -X GET http://localhost:8000/health || echo "Backend health check failed"
          
          # Test frontend health endpoint  
          curl -f -X GET http://localhost:8080/api/health || echo "Frontend health check failed"
          
          # Test system info endpoint (requires auth)
          curl -X GET http://localhost:8000/api/v1/system/info \
            -H "Authorization: ApiKey test_api_key" \
            -H "Content-Type: application/json" || echo "System info endpoint failed"
          
      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > docker-compose.log
          echo "=== Docker Compose Logs ===" 
          tail -n 200 docker-compose.log
          
      - name: Clean up
        if: always()
        run: |
          docker compose down -v

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy on Repository
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true
        with:
          config: auto
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'agent-sandbox'
          path: '.'
          format: 'HTML'
        continue-on-error: true

  # Load Testing (only on main branch)
  load-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Create load test script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.1'],
            },
          };
          
          export default function() {
            let response = http.get('http://localhost:8000/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            sleep(1);
          }
          EOF
          
      - name: Start services for load test
        run: |
          cp .env.example .env
          sed -i 's/your_actual_api_key_here/test_api_key/g' .env
          sed -i 's/your_actual_org_id_here/test_org_id/g' .env
          sed -i 's/your_actual_project_id_here/test_project_id/g' .env
          docker compose up -d
          sleep 30
          
      - name: Run load test
        run: |
          k6 run load-test.js --out json=load-test-results.json || true
          
      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: load-test-results.json
          retention-days: 7
          
      - name: Clean up
        if: always()
        run: |
          docker compose down -v

  # All tests must pass
  tests-passed:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests, security-scan]
    if: always()
    steps:
      - name: Check if all tests passed
        run: |
          if [ "${{ needs.test-backend.result }}" == "success" ] && \
             [ "${{ needs.test-frontend.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Check the workflow results."
            echo "Backend: ${{ needs.test-backend.result }}"
            echo "Frontend: ${{ needs.test-frontend.result }}"
            echo "Integration: ${{ needs.integration-tests.result }}"
            echo "Security: ${{ needs.security-scan.result }}"
            exit 1
          fi